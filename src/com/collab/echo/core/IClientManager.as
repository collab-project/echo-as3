/* * Echo project. * * Copyright (C) 2003-2010 Collab * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */package com.collab.echo.core{    /**     * Client manager interface.     *     * @author Thijs Triemstra     *      * @langversion 3.0 	 * @playerversion Flash 9     */	public interface IClientManager	{		/**		 * Subscribe a client.		 * 		 * @param client		 */				function subscribeClient( client:IClient ):void;		/**		 * Unsubscribe a client.		 * 		 * @param client		 */				function unsubscribeClient( client:IClient ):void;		/**		 * Notify all clients.		 * 		 * @param notification		 * @param args		 */				function notifyClient( notification:String, ...args:Array ):void;				/**         * Registers a method or function to be executed when the specified type of message         * is received from the server.          *          * <p>This method can be used to register listeners that handle messages centrally         * for a group of rooms.</p>         *          * @example For example, suppose a multi-room chat application         * displays a notification icon when a new message is received in any room.         * To catch all incoming messages for all rooms, the application registers a         * single, centralized method for all "CHAT" messages. Here's the registration code:		 * 		 * <listing version="3.0">		 * msgManager.addServerMessageListener(Messages.CHAT, centralChatListener);</listing>         *          * @param type 		The name of the message the listener is registering to receive.         * @param method 	The function or method that will be invoked when the specified message         *                  is received.         * @param forRoomIDs  A list of room IDs. If the message was sent to any of the         *                    rooms in the list, the listener is executed. Otherwise, the         *                    listener is not executed. Applies to messages sent to rooms         *                    only, not to messages sent to specific individual clients or         *                    the entire server.         * @return A Boolean indicating whether the listener was successfully added.         */				function addServerMessageListener( type:String, method:Function, forRoomIDs:Array=null ):Boolean;				/**         * Unregisters a message listener method that was earlier registered for message         * notifications via addServerMessageListener().         *          * @param type 		The string ID of the message for which the listener is unregistering.         * @param method 	The function or method to unregister.         * @return 			A Boolean indicating whether the listener was successfully removed.         */			function removeServerMessageListener( type:String, method:Function ):Boolean;				/**         * Sends a message to clients in the room(s) specified by <code>forRoomIDs</code>.         *          * <p>To send a message to clients in a single room only, use BaseRoom's sendMessage()         * method.</p>         *          * @see com.collab.echo.core.rooms.BaseRoom#sendMessage         *          * @param message		The name of the message to send.         * @param forRoomIDs	The room(s) to which to send the message.         */			function sendServerMessage( message:*, forRoomIDs:Array=null ):void;	}}