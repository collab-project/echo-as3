/* * Echo project. * * Copyright (C) 2003-2010 Collab * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */package com.collab.echo.display{
	import com.collab.echo.core.IClient;
	import com.collab.echo.core.rooms.IRoom;
	import com.collab.echo.model.UserVO;
	
	import flash.utils.getQualifiedClassName;
	    /**     * Observer view.     *     * @author Thijs Triemstra     *      * @langversion 3.0 	 * @playerversion Flash 9     */    public class ClientView extends BaseView implements IClient, IRoom    {		protected var data 	: Array;		        /**         * Constructor.         *          * @param width         * @param height         */		        public function ClientView( width:int=0, height:int=0 )        {        	super( width, height );        	show();        }        /**         * @param notification         * @param args         */		        public function update( notification:String, ...args:Array ) : void        {            switch ( notification )            {            	default:            		trace( getQualifiedClassName( this ) + ".update(" + notification + ", " + args );            		break;            }        }                /**		 * Notify the view that the local client joined the room.		 *		 * @param client		 */		public function joinedRoom( client:UserVO ):void		{		}		        /**		 * Add a new occupant to this view.		 *		 * @param client		 */		public function addOccupant( client:UserVO ):void        {        }                /**		 * Remove an existing occupant from this view.		 *		 * @param client		 */		public function removeOccupant( client:UserVO ):void		{		}				/**		 * Notify the view that the clients in the room updated.		 *		 * @param total		 */		public function numClients( total:int ):void		{		}    }}